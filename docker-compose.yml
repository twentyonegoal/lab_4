version: "3"
services:
   bot:
    container_name: tg_bot
    image: bot_image
    env_file: .env
    networks:
      custom_network:
         ipv4_address: 172.31.0.10
   db:
    container_name: master_db
    image: db_image
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_DB: $DB_DATABASE
      POSTGRES_PASSWORD: $DB_PASSWORD
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c listen_addresses='*'
      -c log_replication_commands=on
      -c archive_mode=on
      -c archive_command='cp %p /var/lib/postgresql/data/%f'
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      custom_network:
         ipv4_address: 172.31.0.20
   db_slave:
    container_name: slave_db
    image: db_repl_image
    user: postgres
    environment:
      PGUSER: $DB_REPL_USER
      PGPASSWORD: $DB_REPL_PASSWORD
    command: |
      bash -c "
      if [ $(ls /var/lib/postgresql/data/ | wc -l) = '0' ]; 
      then 
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=master_db --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres;
      else postgres;
      fi;
      "
    depends_on:
      - db
    ports:
      - "127.0.0.1:54321:5432"
    networks:
      custom_network:
         ipv4_address: 172.31.0.30
networks:
   custom_network:
      driver: bridge
      ipam:
        config:
          - subnet: 172.31.0.0/24





